# tests/test_cbe_scraper.py (ุงููุณุฎุฉ ุงูููุงุฆูุฉ ูุงููุญุฏุซุฉ)
import sys
import os
import pandas as pd
import pytest

# ุฅุถุงูุฉ ุงููุณุงุฑ ุงูุฑุฆูุณู ูููุดุฑูุน ููุณูุงุญ ุจุงูุงุณุชูุฑุงุฏ
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from cbe_scraper import parse_cbe_html, verify_page_structure
import constants as C

# ูุญุชูู HTML ูููู ูุญุชูู ุนูู ุชุงุฑูุฎูู ูุฎุชูููู ูุงุฎุชุจุงุฑ ุงูููุทู ุงูุฌุฏูุฏ
MOCK_HTML_CONTENT = """
<html><body>
    <h2>ุงููุชุงุฆุฌ</h2><table><thead><tr><th>ุงูุจูุงู</th><th>182</th><th>364</th></tr></thead><tbody><tr><td>ุชุงุฑูุฎ ุงูุฌูุณุฉ</td><td>10/07/2025</td><td>10/07/2025</td></tr></tbody></table>
    <p><strong>ุชูุงุตูู ุงูุนุฑูุถ ุงูููุจููุฉ</strong></p><table><tbody><tr><td>ูุชูุณุท ุงูุนุงุฆุฏ ุงููุฑุฌุญ</td><td>27.192</td><td>25.043</td></tr></tbody></table>
    <h2>ุงููุชุงุฆุฌ</h2><table><thead><tr><th>ุงูุจูุงู</th><th>91</th><th>273</th></tr></thead><tbody><tr><td>ุชุงุฑูุฎ ุงูุฌูุณุฉ</td><td>11/07/2025</td><td>11/07/2025</td></tr></tbody></table>
    <p><strong>ุชูุงุตูู ุงูุนุฑูุถ ุงูููุจููุฉ</strong></p><table><tbody><tr><td>ูุชูุณุท ุงูุนุงุฆุฏ ุงููุฑุฌุญ</td><td>27.558</td><td>26.758</td></tr></tbody></table>
</body></html>
"""


def test_html_parser_full_run():
    """๐งช ูุฎุชุจุฑ ุฏุงูุฉ ุชุญููู HTML ููุชุฃูุฏ ูู ุฃููุง ุชุฎุชุงุฑ ุงูุชุงุฑูุฎ ุงูุฃุญุฏุซ ุจุดูู ุตุญูุญ."""
    parsed_df = parse_cbe_html(MOCK_HTML_CONTENT)
    assert isinstance(parsed_df, pd.DataFrame)
    assert len(parsed_df) == 4

    # 1. ูุชุฃูุฏ ูู ูุฌูุฏ ุงูุนููุฏ ุงููุณุงุนุฏ ุงูุฐู ูุญุชูู ุนูู ุงูุชูุงุฑูุฎ ุงููุญููุฉ
    assert "session_date_dt" in parsed_df.columns

    # 2. ูุชุฃูุฏ ูู ุฃู ุงูููุฏ ุงุฎุชุงุฑ ุงูุชุงุฑูุฎ ุงูุฃุญุฏุซ ูู ุจูู ุงูุชูุงุฑูุฎ ุงููุชุงุญุฉ
    latest_date_from_df = parsed_df["session_date_dt"].max().strftime("%d/%m/%Y")
    assert latest_date_from_df == "11/07/2025"

    # 3. ูุชุฃูุฏ ูู ุฃู ุจุงูู ููู ุงูุนูุงุฆุฏ ุตุญูุญุฉ
    parsed_df[C.TENOR_COLUMN_NAME] = pd.to_numeric(parsed_df[C.TENOR_COLUMN_NAME])
    yield_364 = parsed_df[parsed_df[C.TENOR_COLUMN_NAME] == 364][
        C.YIELD_COLUMN_NAME
    ].iloc[0]
    assert yield_364 == 25.043


def test_verify_page_structure_success():
    """๐งช ูุฎุชุจุฑ ุฃู ุงูุชุญูู ูู ูููู ุงูุตูุญุฉ ููุฌุญ ุนูุฏ ูุฌูุฏ ูู ุงูุนูุงูุงุช."""
    verify_page_structure(MOCK_HTML_CONTENT)


def test_verify_page_structure_failure():
    """๐งช ูุฎุชุจุฑ ุฃู ุงูุชุญูู ูู ูููู ุงูุตูุญุฉ ููุดู ุนูุฏ ููุฏุงู ุนูุงูุฉ."""
    invalid_html = MOCK_HTML_CONTENT.replace("ูุชูุณุท ุงูุนุงุฆุฏ ุงููุฑุฌุญ", "ูููุฉ ุฎุงุทุฆุฉ")
    with pytest.raises(RuntimeError) as excinfo:
        verify_page_structure(invalid_html)
    assert "ูุชูุณุท ุงูุนุงุฆุฏ ุงููุฑุฌุญ" in str(excinfo.value)
